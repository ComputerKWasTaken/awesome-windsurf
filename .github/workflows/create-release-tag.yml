name: Create Release Tag

on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
    branches: [main]

jobs:
  check-changes:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      new_version: ${{ steps.version.outputs.version }}
      is_manual_release: ${{ steps.check.outputs.is_manual_release }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if release needed
        id: check
        run: |
          # Check for manual release in PR title or commit message
          PR_TITLE="${{ github.event.pull_request.title }}"
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$PR_TITLE" =~ ^release: ]] || [[ "$LAST_COMMIT_MSG" =~ ^release: ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "is_manual_release=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Count changed files
          FILES_CHANGED=$(git diff --name-only origin/main HEAD | wc -l)
          # Count commits since last release
          COMMITS_COUNT=$(git rev-list $(git describe --tags --abbrev=0)..HEAD --count)
          
          if [ $FILES_CHANGED -gt 5 ] || [ $COMMITS_COUNT -gt 10 ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi
          echo "is_manual_release=false" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: version
        if: steps.check.outputs.should_release == 'true'
        run: |
          # Get current date components
          YEAR=$(date +%Y)
          MONTH=$(date +%m)
          
          # Get current version from package.json
          CURRENT_VERSION=$(npm pkg get version | tr -d '"')
          
          # If current version matches current year/month, increment patch
          if [[ $CURRENT_VERSION =~ ^$YEAR\.$MONTH\.[0-9]+$ ]]; then
            PATCH=$(echo $CURRENT_VERSION | cut -d. -f3)
            PATCH=$((PATCH + 1))
          else
            # New year/month, start at patch 1
            PATCH=1
          fi
          
          NEW_VERSION="$YEAR.$MONTH.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update PR with version info
        if: steps.check.outputs.should_release == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ steps.version.outputs.version }}"
            const isManual = "${{ steps.check.outputs.is_manual_release }}" === "true"
            const message = isManual 
              ? `ðŸ“¦ Manual release \`${version}\` will be created when this PR is merged.`
              : `ðŸ“¦ Changes detected! Version \`${version}\` will be created when this PR is merged.`
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            })

  check-release-status:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      statuses: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check release status
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            
            const hasVersionBump = pr.labels.some(label => label.name === 'version-bump');
            const lastCommit = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha
            });
            const isManualRelease = lastCommit.data.commit.message.startsWith('release:');
            
            const state = (hasVersionBump || isManualRelease) ? 'success' : 'pending';
            const description = (hasVersionBump || isManualRelease) 
              ? 'Ready for release' 
              : 'Waiting for release approval';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: pr.head.sha,
              state,
              description,
              context: 'Release Status'
            });

  update-version:
    needs: check-changes
    if: needs.check-changes.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        
      - name: Update package.json version
        run: |
          VERSION="${{ needs.check-changes.outputs.new_version }}"
          npm version $VERSION --no-git-tag-version
