# This workflow creates git tags when release PRs are merged.
# It ensures that each release has a corresponding git tag,
# making it easier to track versions and generate changelogs.

name: Create Release Tag

on:
  pull_request:
    types: [opened, reopened, edited, synchronize]
    branches: [main]

jobs:
  create-tag:
    runs-on: ubuntu-latest
    if: startsWith(github.event.pull_request.title, 'release:')
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from PR title
        id: version
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          # Extract version after "release:" prefix
          VERSION=$(echo "$PR_TITLE" | sed 's/^release: *//i')
          # Validate CalVer format (YYYY.MM.PATCH)
          if [[ ! $VERSION =~ ^[0-9]{4}\.[0-9]{2}\.[0-9]+$ ]]; then
            echo "Invalid version format. Must be YYYY.MM.PATCH"
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Update package.json version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          CURRENT_VERSION=$(npm pkg get version | tr -d '"')
          if [ "$VERSION" != "$CURRENT_VERSION" ]; then
            npm version $VERSION --no-git-tag-version
          fi

      - name: Create Pull Request comment
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ steps.version.outputs.version }}"
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `âœ¨ Version \`${version}\` will be created when this PR is merged.`
            })
